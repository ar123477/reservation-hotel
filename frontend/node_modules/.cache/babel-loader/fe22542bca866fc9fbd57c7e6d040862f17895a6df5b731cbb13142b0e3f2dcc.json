{"ast":null,"code":"// src/services/api.js - CORRECTION DES FONCTIONS ROOMS\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Petit client HTTP avec en-tête Authorization automatique\nasync function http(path, {\n  method = 'GET',\n  headers = {},\n  body,\n  auth = true\n} = {}) {\n  const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n  const mergedHeaders = {\n    'Content-Type': 'application/json',\n    ...(auth && token ? {\n      'Authorization': `Bearer ${token}`\n    } : {}),\n    ...headers\n  };\n  const response = await fetch(`${API_BASE_URL}${path}`, {\n    method,\n    headers: mergedHeaders,\n    body: body ? JSON.stringify(body) : undefined\n  });\n  const isJson = (response.headers.get('content-type') || '').includes('application/json');\n  const data = isJson ? await response.json() : null;\n  if (!response.ok) {\n    const message = data && data.message ? data.message : `Erreur HTTP ${response.status}`;\n    throw new Error(message);\n  }\n  return data;\n}\n\n// Données mock pour le développement avec vraies images\nconst mockUsers = [{\n  id: 1,\n  email: 'admin@test.com',\n  name: 'Admin Test',\n  role: 'super_admin'\n}];\nconst mockHotels = [{\n  id: 1,\n  nom: \"Hôtel Sarakawa\",\n  adresse: \"Boulevard du Mono, Lomé\",\n  telephone: \"+228 22 21 45 00\",\n  email: \"reservation@sarakawa.tg\",\n  note: 4.5,\n  prix_min: 55000,\n  images: ['https://images.unsplash.com/photo-1566073771259-6a8506099945?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=500&h=300&fit=crop'],\n  description: \"Hôtel de luxe emblématique face à l'océan avec casino et golf. Cadre exceptionnel pour un séjour mémorable.\",\n  equipements: ['Casino', 'Golf', 'Piscine', 'Spa', 'Plage privée', 'Wi-Fi', 'Restaurant', 'Bar'],\n  ville: \"Lomé\"\n}, {\n  id: 2,\n  nom: \"Hôtel du 2 Février\",\n  adresse: \"Rue des Nimes, Lomé\",\n  telephone: \"+228 22 23 18 00\",\n  email: \"contact@hotel2fevrier.tg\",\n  note: 4.3,\n  prix_min: 45000,\n  images: ['https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=500&h=300&fit=crop'],\n  description: \"Hôtel d'affaires moderne au cœur de la capitale. Idéal pour voyages professionnels.\",\n  equipements: ['Piscine', 'Salle de conférence', 'Restaurant', 'Wi-Fi', 'Fitness', 'Room Service'],\n  ville: \"Lomé\"\n}];\nconst mockRooms = {\n  1: [\n  // Chambres pour l'hôtel Sarakawa\n  {\n    id: 1,\n    hotelId: 1,\n    type_chambre: \"Chambre Standard\",\n    superficie: \"35m²\",\n    prix_nuit: 55000,\n    prix_heure: 18000,\n    capacite: \"2 personnes\",\n    image: 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400&h=250&fit=crop',\n    equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Salle de bain privée\"]\n  }, {\n    id: 2,\n    hotelId: 1,\n    type_chambre: \"Suite Deluxe\",\n    superficie: \"60m²\",\n    prix_nuit: 85000,\n    prix_heure: 28000,\n    capacite: \"3 personnes\",\n    image: 'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=400&h=250&fit=crop',\n    equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Mini-bar\", \"Spa\", \"Vue mer\"]\n  }],\n  2: [\n  // Chambres pour l'hôtel 2 Février\n  {\n    id: 3,\n    hotelId: 2,\n    type_chambre: \"Chambre Affaires\",\n    superficie: \"30m²\",\n    prix_nuit: 45000,\n    prix_heure: 15000,\n    capacite: \"2 personnes\",\n    image: 'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=400&h=250&fit=crop',\n    equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"Bureau\", \"Salle de bain privée\"]\n  }]\n};\n\n// API d'authentification\nexport const authAPI = {\n  async login(email, password) {\n    try {\n      const data = await http('/api/authentification/connecter', {\n        method: 'POST',\n        auth: false,\n        body: {\n          email,\n          password\n        }\n      });\n      return data; // { token, user }\n    } catch (e) {\n      // Fallback mock en dev\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const user = mockUsers.find(u => u.email === email);\n      if (user && password === 'password') {\n        return {\n          token: 'mock-jwt-token-' + Date.now(),\n          user\n        };\n      }\n      throw e;\n    }\n  },\n  async register(userData) {\n    try {\n      const data = await http('/api/authentification/inscrire', {\n        method: 'POST',\n        auth: false,\n        body: userData\n      });\n      return data; // { token, user }\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newUser = {\n        id: mockUsers.length + 1,\n        ...userData,\n        role: 'client'\n      };\n      return {\n        token: 'mock-jwt-token-' + Date.now(),\n        user: newUser\n      };\n    }\n  },\n  async getProfile() {\n    try {\n      return await http('/api/authentification/profil', {\n        method: 'GET',\n        auth: true\n      });\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n      if (!token) throw e;\n      return mockUsers[0];\n    }\n  }\n};\n\n// API des hôtels\nexport const hotelsAPI = {\n  async getHotels() {\n    try {\n      return await http('/api/hotels', {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n  async getAll() {\n    try {\n      return await http('/api/hotels', {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n  async getHotelById(id) {\n    try {\n      return await http(`/api/hotels/${id}`, {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      const hotel = mockHotels.find(h => h.id === parseInt(id));\n      if (!hotel) throw new Error('Hôtel non trouvé');\n      return hotel;\n    }\n  },\n  // ALIAS pour compatibilité\n  async getById(id) {\n    return this.getHotelById(id);\n  }\n};\n\n// API des chambres - CORRECTION DES FONCTIONS\nexport const roomsAPI = {\n  async getRoomsByHotel(hotelId) {\n    try {\n      const query = `?hotel_id=${encodeURIComponent(hotelId)}`;\n      return await http(`/api/chambres${query}`, {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      return mockRooms[parseInt(hotelId)] || [];\n    }\n  },\n  // CORRECTION : Cette fonction doit être définie correctement\n  async getByHotel(hotelId) {\n    return this.getRoomsByHotel(hotelId);\n  },\n  async getTypes(hotelId) {\n    // Retourne des agrégations par type depuis le backend si disponible, sinon fallback mock\n    try {\n      const params = hotelId ? `?hotel_id=${encodeURIComponent(hotelId)}` : '';\n      const rooms = await http(`/api/chambres${params}`, {\n        method: 'GET'\n      });\n      const byType = rooms.reduce((acc, r) => {\n        const key = r.type_chambre || r.type || 'Inconnu';\n        if (!acc[key]) acc[key] = {\n          id: r.id,\n          type: key,\n          prix_nuit: r.prix,\n          prix_heure: Math.round(r.prix / 24 * 100) / 100\n        };\n        return acc;\n      }, {});\n      return Object.values(byType);\n    } catch (_) {\n      // fallback: dérive depuis les mocks chambres\n      const list = hotelId ? mockRooms[parseInt(hotelId)] || [] : Object.values(mockRooms).flat();\n      const byType = list.reduce((acc, r) => {\n        const key = r.type_chambre || r.type || 'Inconnu';\n        if (!acc[key]) acc[key] = {\n          id: r.id,\n          type: key,\n          prix_nuit: r.prix_nuit || r.prix,\n          prix_heure: r.prix_heure || Math.round((r.prix || 0) / 24 * 100) / 100\n        };\n        return acc;\n      }, {});\n      return Object.values(byType);\n    }\n  },\n  async getDisponibilite({\n    hotel_id,\n    date_arrivee,\n    date_depart,\n    type_chambre\n  }) {\n    const q = new URLSearchParams();\n    if (hotel_id) q.set('hotel_id', hotel_id);\n    if (date_arrivee) q.set('date_arrivee', date_arrivee);\n    if (date_depart) q.set('date_depart', date_depart);\n    if (type_chambre) q.set('type_chambre', type_chambre);\n    return await http(`/api/chambres/disponibilite?${q.toString()}`, {\n      method: 'GET'\n    });\n  }\n};\n\n// API des réservations\nexport const reservationsAPI = {\n  async createReservation(reservationData) {\n    try {\n      return await http('/api/reservations', {\n        method: 'POST',\n        body: reservationData\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 250));\n      return {\n        id: Date.now(),\n        ...reservationData,\n        statut: 'confirmée',\n        dateCreation: new Date().toISOString()\n      };\n    }\n  },\n  async getUserReservations() {\n    try {\n      return await http('/api/reservations', {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return [];\n    }\n  }\n};\n\n// API des paiements\nexport const paymentsAPI = {\n  async payOnline({\n    reservation_id,\n    details_carte = {}\n  }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/simuler-paiement`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({\n        reservation_id,\n        details_carte\n      })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement en ligne');\n    return res.json();\n  },\n  async payOnSite({\n    reservation_id\n  }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/paiement-sur-place`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({\n        reservation_id\n      })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement sur place');\n    return res.json();\n  }\n};\n\n// API hôtel (alias pour hotelsAPI pour compatibilité)\nexport const hotelAPI = hotelsAPI;\n\n// Fonction utilitaire de smoke test (dev uniquement)\nexport async function devSmokeTest({\n  email = 'admin@test.com',\n  password = 'password'\n} = {}) {\n  // 1) Login\n  const {\n    token,\n    user\n  } = await authAPI.login(email, password);\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem('token', token);\n  }\n  // 2) Charger les hôtels\n  const hotels = await hotelsAPI.getHotels();\n  return {\n    user,\n    hotels\n  };\n}\n\n// =========================\n// Réception API\n// =========================\nexport const receptionAPI = {\n  async getDashboard(hotelId) {\n    const path = hotelId ? `/api/reception/tableau-bord/${encodeURIComponent(hotelId)}` : '/api/reception/tableau-bord';\n    return await http(path, {\n      method: 'GET'\n    });\n  },\n  async getClientsPresents(hotelId) {\n    const path = hotelId ? `/api/reception/clients-presents/${encodeURIComponent(hotelId)}` : '/api/reception/clients-presents';\n    return await http(path, {\n      method: 'GET'\n    });\n  },\n  async enregistrerArrivee({\n    reservation_id,\n    heure_arrivee\n  }) {\n    return await http('/api/reception/arrivee', {\n      method: 'POST',\n      body: {\n        reservation_id,\n        heure_arrivee\n      }\n    });\n  },\n  async enregistrerDepart({\n    reservation_id,\n    heure_depart\n  }) {\n    return await http('/api/reception/depart', {\n      method: 'POST',\n      body: {\n        reservation_id,\n        heure_depart\n      }\n    });\n  },\n  async genererFacture(reservation_id) {\n    return await http(`/api/reception/facture/${encodeURIComponent(reservation_id)}`, {\n      method: 'GET'\n    });\n  },\n  async gererRetard(reservation_id, payload = {}) {\n    return await http(`/api/reception/retard/${encodeURIComponent(reservation_id)}`, {\n      method: 'POST',\n      body: payload\n    });\n  }\n};\n\n// =========================\n// Nettoyage API\n// =========================\nexport const nettoyageAPI = {\n  async getTaches(hotelId) {\n    // backend ne requiert pas explicitement hotelId en query, mais on peut l'ajouter si supporté\n    // sinon, l'API utilisera le hotel_id du token\n    const path = '/api/nettoyage' + (hotelId ? `?hotel_id=${encodeURIComponent(hotelId)}` : '');\n    return await http(path, {\n      method: 'GET'\n    });\n  },\n  async creerTache({\n    hotel_id,\n    chambre_id,\n    description,\n    priorite = 'normale'\n  }) {\n    return await http('/api/nettoyage', {\n      method: 'POST',\n      body: {\n        hotel_id,\n        chambre_id,\n        description,\n        priorite\n      }\n    });\n  },\n  async majStatut(tache_id, statut) {\n    return await http(`/api/nettoyage/${encodeURIComponent(tache_id)}/statut`, {\n      method: 'PATCH',\n      body: {\n        statut\n      }\n    });\n  },\n  async assigner(tache_id, agent_id) {\n    return await http(`/api/nettoyage/${encodeURIComponent(tache_id)}/assigner`, {\n      method: 'PATCH',\n      body: {\n        agent_id\n      }\n    });\n  },\n  async getTableauBord(hotelId) {\n    const path = hotelId ? `/api/nettoyage/tableau-bord/${encodeURIComponent(hotelId)}` : '/api/nettoyage/tableau-bord';\n    return await http(path, {\n      method: 'GET'\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","http","path","method","headers","body","auth","token","localStorage","getItem","mergedHeaders","response","fetch","JSON","stringify","undefined","isJson","get","includes","data","json","ok","message","status","Error","mockUsers","id","email","name","role","mockHotels","nom","adresse","telephone","note","prix_min","images","description","equipements","ville","mockRooms","hotelId","type_chambre","superficie","prix_nuit","prix_heure","capacite","image","authAPI","login","password","e","Promise","resolve","setTimeout","user","find","u","Date","now","register","userData","newUser","length","getProfile","hotelsAPI","getHotels","_","getAll","getHotelById","hotel","h","parseInt","getById","roomsAPI","getRoomsByHotel","query","encodeURIComponent","getByHotel","getTypes","params","rooms","byType","reduce","acc","r","key","type","prix","Math","round","Object","values","list","flat","getDisponibilite","hotel_id","date_arrivee","date_depart","q","URLSearchParams","set","toString","reservationsAPI","createReservation","reservationData","statut","dateCreation","toISOString","getUserReservations","paymentsAPI","payOnline","reservation_id","details_carte","res","payOnSite","hotelAPI","devSmokeTest","setItem","hotels","receptionAPI","getDashboard","getClientsPresents","enregistrerArrivee","heure_arrivee","enregistrerDepart","heure_depart","genererFacture","gererRetard","payload","nettoyageAPI","getTaches","creerTache","chambre_id","priorite","majStatut","tache_id","assigner","agent_id","getTableauBord"],"sources":["C:/Users/HOME/Videos/reservation-hotel/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js - CORRECTION DES FONCTIONS ROOMS\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Petit client HTTP avec en-tête Authorization automatique\nasync function http(path, { method = 'GET', headers = {}, body, auth = true } = {}) {\n  const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n  const mergedHeaders = {\n    'Content-Type': 'application/json',\n    ...(auth && token ? { 'Authorization': `Bearer ${token}` } : {}),\n    ...headers\n  };\n\n  const response = await fetch(`${API_BASE_URL}${path}`, {\n    method,\n    headers: mergedHeaders,\n    body: body ? JSON.stringify(body) : undefined\n  });\n\n  const isJson = (response.headers.get('content-type') || '').includes('application/json');\n  const data = isJson ? await response.json() : null;\n  if (!response.ok) {\n    const message = data && data.message ? data.message : `Erreur HTTP ${response.status}`;\n    throw new Error(message);\n  }\n  return data;\n}\n\n// Données mock pour le développement avec vraies images\nconst mockUsers = [\n  {\n    id: 1,\n    email: 'admin@test.com',\n    name: 'Admin Test',\n    role: 'super_admin'\n  }\n];\n\nconst mockHotels = [\n  {\n    id: 1,\n    nom: \"Hôtel Sarakawa\",\n    adresse: \"Boulevard du Mono, Lomé\",\n    telephone: \"+228 22 21 45 00\",\n    email: \"reservation@sarakawa.tg\",\n    note: 4.5,\n    prix_min: 55000,\n    images: [\n      'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=500&h=300&fit=crop'\n    ],\n    description: \"Hôtel de luxe emblématique face à l'océan avec casino et golf. Cadre exceptionnel pour un séjour mémorable.\",\n    equipements: ['Casino', 'Golf', 'Piscine', 'Spa', 'Plage privée', 'Wi-Fi', 'Restaurant', 'Bar'],\n    ville: \"Lomé\"\n  },\n  {\n    id: 2,\n    nom: \"Hôtel du 2 Février\",\n    adresse: \"Rue des Nimes, Lomé\",\n    telephone: \"+228 22 23 18 00\",\n    email: \"contact@hotel2fevrier.tg\",\n    note: 4.3,\n    prix_min: 45000,\n    images: [\n      'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=500&h=300&fit=crop'\n    ],\n    description: \"Hôtel d'affaires moderne au cœur de la capitale. Idéal pour voyages professionnels.\",\n    equipements: ['Piscine', 'Salle de conférence', 'Restaurant', 'Wi-Fi', 'Fitness', 'Room Service'],\n    ville: \"Lomé\"\n  }\n];\n\nconst mockRooms = {\n  1: [ // Chambres pour l'hôtel Sarakawa\n    {\n      id: 1,\n      hotelId: 1,\n      type_chambre: \"Chambre Standard\",\n      superficie: \"35m²\",\n      prix_nuit: 55000,\n      prix_heure: 18000,\n      capacite: \"2 personnes\",\n      image: 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400&h=250&fit=crop',\n      equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Salle de bain privée\"]\n    },\n    {\n      id: 2,\n      hotelId: 1,\n      type_chambre: \"Suite Deluxe\",\n      superficie: \"60m²\",\n      prix_nuit: 85000,\n      prix_heure: 28000,\n      capacite: \"3 personnes\",\n      image: 'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=400&h=250&fit=crop',\n      equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Mini-bar\", \"Spa\", \"Vue mer\"]\n    }\n  ],\n  2: [ // Chambres pour l'hôtel 2 Février\n    {\n      id: 3,\n      hotelId: 2,\n      type_chambre: \"Chambre Affaires\",\n      superficie: \"30m²\",\n      prix_nuit: 45000,\n      prix_heure: 15000,\n      capacite: \"2 personnes\",\n      image: 'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=400&h=250&fit=crop',\n      equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"Bureau\", \"Salle de bain privée\"]\n    }\n  ]\n};\n\n// API d'authentification\nexport const authAPI = {\n  async login(email, password) {\n    try {\n      const data = await http('/api/authentification/connecter', {\n        method: 'POST',\n        auth: false,\n        body: { email, password }\n      });\n      return data; // { token, user }\n    } catch (e) {\n      // Fallback mock en dev\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const user = mockUsers.find(u => u.email === email);\n      if (user && password === 'password') {\n        return { token: 'mock-jwt-token-' + Date.now(), user };\n      }\n      throw e;\n    }\n  },\n\n  async register(userData) {\n    try {\n      const data = await http('/api/authentification/inscrire', {\n        method: 'POST',\n        auth: false,\n        body: userData\n      });\n      return data; // { token, user }\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newUser = { id: mockUsers.length + 1, ...userData, role: 'client' };\n      return { token: 'mock-jwt-token-' + Date.now(), user: newUser };\n    }\n  },\n\n  async getProfile() {\n    try {\n      return await http('/api/authentification/profil', { method: 'GET', auth: true });\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n      if (!token) throw e;\n      return mockUsers[0];\n    }\n  }\n};\n\n// API des hôtels\nexport const hotelsAPI = {\n  async getHotels() {\n    try {\n      return await http('/api/hotels', { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n\n  async getAll() {\n    try {\n      return await http('/api/hotels', { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n\n  async getHotelById(id) {\n    try {\n      return await http(`/api/hotels/${id}`, { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      const hotel = mockHotels.find(h => h.id === parseInt(id));\n      if (!hotel) throw new Error('Hôtel non trouvé');\n      return hotel;\n    }\n  },\n\n  // ALIAS pour compatibilité\n  async getById(id) {\n    return this.getHotelById(id);\n  }\n};\n\n// API des chambres - CORRECTION DES FONCTIONS\nexport const roomsAPI = {\n  async getRoomsByHotel(hotelId) {\n    try {\n      const query = `?hotel_id=${encodeURIComponent(hotelId)}`;\n      return await http(`/api/chambres${query}`, { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      return mockRooms[parseInt(hotelId)] || [];\n    }\n  },\n\n  // CORRECTION : Cette fonction doit être définie correctement\n  async getByHotel(hotelId) {\n    return this.getRoomsByHotel(hotelId);\n  },\n\n  async getTypes(hotelId) {\n    // Retourne des agrégations par type depuis le backend si disponible, sinon fallback mock\n    try {\n      const params = hotelId ? `?hotel_id=${encodeURIComponent(hotelId)}` : '';\n      const rooms = await http(`/api/chambres${params}`, { method: 'GET' });\n      const byType = rooms.reduce((acc, r) => {\n        const key = r.type_chambre || r.type || 'Inconnu';\n        if (!acc[key]) acc[key] = { id: r.id, type: key, prix_nuit: r.prix, prix_heure: Math.round((r.prix / 24) * 100) / 100 };\n        return acc;\n      }, {});\n      return Object.values(byType);\n    } catch (_) {\n      // fallback: dérive depuis les mocks chambres\n      const list = hotelId ? (mockRooms[parseInt(hotelId)] || []) : Object.values(mockRooms).flat();\n      const byType = list.reduce((acc, r) => {\n        const key = r.type_chambre || r.type || 'Inconnu';\n        if (!acc[key]) acc[key] = { id: r.id, type: key, prix_nuit: r.prix_nuit || r.prix, prix_heure: r.prix_heure || Math.round(((r.prix || 0) / 24) * 100) / 100 };\n        return acc;\n      }, {});\n      return Object.values(byType);\n    }\n  },\n\n  async getDisponibilite({ hotel_id, date_arrivee, date_depart, type_chambre }) {\n    const q = new URLSearchParams();\n    if (hotel_id) q.set('hotel_id', hotel_id);\n    if (date_arrivee) q.set('date_arrivee', date_arrivee);\n    if (date_depart) q.set('date_depart', date_depart);\n    if (type_chambre) q.set('type_chambre', type_chambre);\n    return await http(`/api/chambres/disponibilite?${q.toString()}`, { method: 'GET' });\n  }\n};\n\n// API des réservations\nexport const reservationsAPI = {\n  async createReservation(reservationData) {\n    try {\n      return await http('/api/reservations', {\n        method: 'POST',\n        body: reservationData\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 250));\n      return {\n        id: Date.now(),\n        ...reservationData,\n        statut: 'confirmée',\n        dateCreation: new Date().toISOString()\n      };\n    }\n  },\n\n  async getUserReservations() {\n    try {\n      return await http('/api/reservations', { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return [];\n    }\n  }\n};\n\n// API des paiements\nexport const paymentsAPI = {\n  async payOnline({ reservation_id, details_carte = {} }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/simuler-paiement`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({ reservation_id, details_carte })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement en ligne');\n    return res.json();\n  },\n\n  async payOnSite({ reservation_id }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/paiement-sur-place`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({ reservation_id })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement sur place');\n    return res.json();\n  }\n};\n\n// API hôtel (alias pour hotelsAPI pour compatibilité)\nexport const hotelAPI = hotelsAPI;\n\n// Fonction utilitaire de smoke test (dev uniquement)\nexport async function devSmokeTest({ email = 'admin@test.com', password = 'password' } = {}) {\n  // 1) Login\n  const { token, user } = await authAPI.login(email, password);\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem('token', token);\n  }\n  // 2) Charger les hôtels\n  const hotels = await hotelsAPI.getHotels();\n  return { user, hotels };\n}\n\n// =========================\n// Réception API\n// =========================\nexport const receptionAPI = {\n  async getDashboard(hotelId) {\n    const path = hotelId ? `/api/reception/tableau-bord/${encodeURIComponent(hotelId)}` : '/api/reception/tableau-bord';\n    return await http(path, { method: 'GET' });\n  },\n\n  async getClientsPresents(hotelId) {\n    const path = hotelId ? `/api/reception/clients-presents/${encodeURIComponent(hotelId)}` : '/api/reception/clients-presents';\n    return await http(path, { method: 'GET' });\n  },\n\n  async enregistrerArrivee({ reservation_id, heure_arrivee }) {\n    return await http('/api/reception/arrivee', { method: 'POST', body: { reservation_id, heure_arrivee } });\n  },\n\n  async enregistrerDepart({ reservation_id, heure_depart }) {\n    return await http('/api/reception/depart', { method: 'POST', body: { reservation_id, heure_depart } });\n  },\n\n  async genererFacture(reservation_id) {\n    return await http(`/api/reception/facture/${encodeURIComponent(reservation_id)}`, { method: 'GET' });\n  },\n\n  async gererRetard(reservation_id, payload = {}) {\n    return await http(`/api/reception/retard/${encodeURIComponent(reservation_id)}`, { method: 'POST', body: payload });\n  }\n};\n\n// =========================\n// Nettoyage API\n// =========================\nexport const nettoyageAPI = {\n  async getTaches(hotelId) {\n    // backend ne requiert pas explicitement hotelId en query, mais on peut l'ajouter si supporté\n    // sinon, l'API utilisera le hotel_id du token\n    const path = '/api/nettoyage' + (hotelId ? `?hotel_id=${encodeURIComponent(hotelId)}` : '');\n    return await http(path, { method: 'GET' });\n  },\n\n  async creerTache({ hotel_id, chambre_id, description, priorite = 'normale' }) {\n    return await http('/api/nettoyage', { method: 'POST', body: { hotel_id, chambre_id, description, priorite } });\n  },\n\n  async majStatut(tache_id, statut) {\n    return await http(`/api/nettoyage/${encodeURIComponent(tache_id)}/statut`, { method: 'PATCH', body: { statut } });\n  },\n\n  async assigner(tache_id, agent_id) {\n    return await http(`/api/nettoyage/${encodeURIComponent(tache_id)}/assigner`, { method: 'PATCH', body: { agent_id } });\n  },\n\n  async getTableauBord(hotelId) {\n    const path = hotelId ? `/api/nettoyage/tableau-bord/${encodeURIComponent(hotelId)}` : '/api/nettoyage/tableau-bord';\n    return await http(path, { method: 'GET' });\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,eAAeC,IAAIA,CAACC,IAAI,EAAE;EAAEC,MAAM,GAAG,KAAK;EAAEC,OAAO,GAAG,CAAC,CAAC;EAAEC,IAAI;EAAEC,IAAI,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,EAAE;EAClF,MAAMC,KAAK,GAAG,OAAOC,YAAY,KAAK,WAAW,GAAGA,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI;EACxF,MAAMC,aAAa,GAAG;IACpB,cAAc,EAAE,kBAAkB;IAClC,IAAIJ,IAAI,IAAIC,KAAK,GAAG;MAAE,eAAe,EAAE,UAAUA,KAAK;IAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,GAAGH;EACL,CAAC;EAED,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,YAAY,GAAGK,IAAI,EAAE,EAAE;IACrDC,MAAM;IACNC,OAAO,EAAEM,aAAa;IACtBL,IAAI,EAAEA,IAAI,GAAGQ,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,GAAGU;EACtC,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,CAACL,QAAQ,CAACP,OAAO,CAACa,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,EAAEC,QAAQ,CAAC,kBAAkB,CAAC;EACxF,MAAMC,IAAI,GAAGH,MAAM,GAAG,MAAML,QAAQ,CAACS,IAAI,CAAC,CAAC,GAAG,IAAI;EAClD,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;IAChB,MAAMC,OAAO,GAAGH,IAAI,IAAIA,IAAI,CAACG,OAAO,GAAGH,IAAI,CAACG,OAAO,GAAG,eAAeX,QAAQ,CAACY,MAAM,EAAE;IACtF,MAAM,IAAIC,KAAK,CAACF,OAAO,CAAC;EAC1B;EACA,OAAOH,IAAI;AACb;;AAEA;AACA,MAAMM,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,gBAAgB;EACvBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMC,UAAU,GAAG,CACjB;EACEJ,EAAE,EAAE,CAAC;EACLK,GAAG,EAAE,gBAAgB;EACrBC,OAAO,EAAE,yBAAyB;EAClCC,SAAS,EAAE,kBAAkB;EAC7BN,KAAK,EAAE,yBAAyB;EAChCO,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE,KAAK;EACfC,MAAM,EAAE,CACN,mFAAmF,EACnF,gFAAgF,EAChF,mFAAmF,CACpF;EACDC,WAAW,EAAE,6GAA6G;EAC1HC,WAAW,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,CAAC;EAC/FC,KAAK,EAAE;AACT,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLK,GAAG,EAAE,oBAAoB;EACzBC,OAAO,EAAE,qBAAqB;EAC9BC,SAAS,EAAE,kBAAkB;EAC7BN,KAAK,EAAE,0BAA0B;EACjCO,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE,KAAK;EACfC,MAAM,EAAE,CACN,mFAAmF,EACnF,mFAAmF,EACnF,mFAAmF,CACpF;EACDC,WAAW,EAAE,qFAAqF;EAClGC,WAAW,EAAE,CAAC,SAAS,EAAE,qBAAqB,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC;EACjGC,KAAK,EAAE;AACT,CAAC,CACF;AAED,MAAMC,SAAS,GAAG;EAChB,CAAC,EAAE;EAAE;EACH;IACEd,EAAE,EAAE,CAAC;IACLe,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE,kBAAkB;IAChCC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,aAAa;IACvBC,KAAK,EAAE,mFAAmF;IAC1FT,WAAW,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,sBAAsB;EACzF,CAAC,EACD;IACEZ,EAAE,EAAE,CAAC;IACLe,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE,cAAc;IAC5BC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,aAAa;IACvBC,KAAK,EAAE,mFAAmF;IAC1FT,WAAW,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS;EAC/F,CAAC,CACF;EACD,CAAC,EAAE;EAAE;EACH;IACEZ,EAAE,EAAE,CAAC;IACLe,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE,kBAAkB;IAChCC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,aAAa;IACvBC,KAAK,EAAE,mFAAmF;IAC1FT,WAAW,EAAE,CAAC,eAAe,EAAE,eAAe,EAAE,QAAQ,EAAE,sBAAsB;EAClF,CAAC;AAEL,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrB,MAAMC,KAAKA,CAACtB,KAAK,EAAEuB,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAM/B,IAAI,GAAG,MAAMlB,IAAI,CAAC,iCAAiC,EAAE;QACzDE,MAAM,EAAE,MAAM;QACdG,IAAI,EAAE,KAAK;QACXD,IAAI,EAAE;UAAEsB,KAAK;UAAEuB;QAAS;MAC1B,CAAC,CAAC;MACF,OAAO/B,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOgC,CAAC,EAAE;MACV;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,MAAME,IAAI,GAAG9B,SAAS,CAAC+B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC9B,KAAK,KAAKA,KAAK,CAAC;MACnD,IAAI4B,IAAI,IAAIL,QAAQ,KAAK,UAAU,EAAE;QACnC,OAAO;UAAE3C,KAAK,EAAE,iBAAiB,GAAGmD,IAAI,CAACC,GAAG,CAAC,CAAC;UAAEJ;QAAK,CAAC;MACxD;MACA,MAAMJ,CAAC;IACT;EACF,CAAC;EAED,MAAMS,QAAQA,CAACC,QAAQ,EAAE;IACvB,IAAI;MACF,MAAM1C,IAAI,GAAG,MAAMlB,IAAI,CAAC,gCAAgC,EAAE;QACxDE,MAAM,EAAE,MAAM;QACdG,IAAI,EAAE,KAAK;QACXD,IAAI,EAAEwD;MACR,CAAC,CAAC;MACF,OAAO1C,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOgC,CAAC,EAAE;MACV,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,MAAMS,OAAO,GAAG;QAAEpC,EAAE,EAAED,SAAS,CAACsC,MAAM,GAAG,CAAC;QAAE,GAAGF,QAAQ;QAAEhC,IAAI,EAAE;MAAS,CAAC;MACzE,OAAO;QAAEtB,KAAK,EAAE,iBAAiB,GAAGmD,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEJ,IAAI,EAAEO;MAAQ,CAAC;IACjE;EACF,CAAC;EAED,MAAME,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,OAAO,MAAM/D,IAAI,CAAC,8BAA8B,EAAE;QAAEE,MAAM,EAAE,KAAK;QAAEG,IAAI,EAAE;MAAK,CAAC,CAAC;IAClF,CAAC,CAAC,OAAO6C,CAAC,EAAE;MACV,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,MAAM9C,KAAK,GAAG,OAAOC,YAAY,KAAK,WAAW,GAAGA,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI;MACxF,IAAI,CAACF,KAAK,EAAE,MAAM4C,CAAC;MACnB,OAAO1B,SAAS,CAAC,CAAC,CAAC;IACrB;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMwC,SAAS,GAAG;EACvB,MAAMC,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,OAAO,MAAMjE,IAAI,CAAC,aAAa,EAAE;QAAEE,MAAM,EAAE;MAAM,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOgE,CAAC,EAAE;MACV,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,OAAOvB,UAAU;IACnB;EACF,CAAC;EAED,MAAMsC,MAAMA,CAAA,EAAG;IACb,IAAI;MACF,OAAO,MAAMnE,IAAI,CAAC,aAAa,EAAE;QAAEE,MAAM,EAAE;MAAM,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOgE,CAAC,EAAE;MACV,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,OAAOvB,UAAU;IACnB;EACF,CAAC;EAED,MAAMuC,YAAYA,CAAC3C,EAAE,EAAE;IACrB,IAAI;MACF,OAAO,MAAMzB,IAAI,CAAC,eAAeyB,EAAE,EAAE,EAAE;QAAEvB,MAAM,EAAE;MAAM,CAAC,CAAC;IAC3D,CAAC,CAAC,OAAOgE,CAAC,EAAE;MACV,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,MAAMiB,KAAK,GAAGxC,UAAU,CAAC0B,IAAI,CAACe,CAAC,IAAIA,CAAC,CAAC7C,EAAE,KAAK8C,QAAQ,CAAC9C,EAAE,CAAC,CAAC;MACzD,IAAI,CAAC4C,KAAK,EAAE,MAAM,IAAI9C,KAAK,CAAC,kBAAkB,CAAC;MAC/C,OAAO8C,KAAK;IACd;EACF,CAAC;EAED;EACA,MAAMG,OAAOA,CAAC/C,EAAE,EAAE;IAChB,OAAO,IAAI,CAAC2C,YAAY,CAAC3C,EAAE,CAAC;EAC9B;AACF,CAAC;;AAED;AACA,OAAO,MAAMgD,QAAQ,GAAG;EACtB,MAAMC,eAAeA,CAAClC,OAAO,EAAE;IAC7B,IAAI;MACF,MAAMmC,KAAK,GAAG,aAAaC,kBAAkB,CAACpC,OAAO,CAAC,EAAE;MACxD,OAAO,MAAMxC,IAAI,CAAC,gBAAgB2E,KAAK,EAAE,EAAE;QAAEzE,MAAM,EAAE;MAAM,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAOgE,CAAC,EAAE;MACV,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,OAAOb,SAAS,CAACgC,QAAQ,CAAC/B,OAAO,CAAC,CAAC,IAAI,EAAE;IAC3C;EACF,CAAC;EAED;EACA,MAAMqC,UAAUA,CAACrC,OAAO,EAAE;IACxB,OAAO,IAAI,CAACkC,eAAe,CAAClC,OAAO,CAAC;EACtC,CAAC;EAED,MAAMsC,QAAQA,CAACtC,OAAO,EAAE;IACtB;IACA,IAAI;MACF,MAAMuC,MAAM,GAAGvC,OAAO,GAAG,aAAaoC,kBAAkB,CAACpC,OAAO,CAAC,EAAE,GAAG,EAAE;MACxE,MAAMwC,KAAK,GAAG,MAAMhF,IAAI,CAAC,gBAAgB+E,MAAM,EAAE,EAAE;QAAE7E,MAAM,EAAE;MAAM,CAAC,CAAC;MACrE,MAAM+E,MAAM,GAAGD,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QACtC,MAAMC,GAAG,GAAGD,CAAC,CAAC3C,YAAY,IAAI2C,CAAC,CAACE,IAAI,IAAI,SAAS;QACjD,IAAI,CAACH,GAAG,CAACE,GAAG,CAAC,EAAEF,GAAG,CAACE,GAAG,CAAC,GAAG;UAAE5D,EAAE,EAAE2D,CAAC,CAAC3D,EAAE;UAAE6D,IAAI,EAAED,GAAG;UAAE1C,SAAS,EAAEyC,CAAC,CAACG,IAAI;UAAE3C,UAAU,EAAE4C,IAAI,CAACC,KAAK,CAAEL,CAAC,CAACG,IAAI,GAAG,EAAE,GAAI,GAAG,CAAC,GAAG;QAAI,CAAC;QACvH,OAAOJ,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MACN,OAAOO,MAAM,CAACC,MAAM,CAACV,MAAM,CAAC;IAC9B,CAAC,CAAC,OAAOf,CAAC,EAAE;MACV;MACA,MAAM0B,IAAI,GAAGpD,OAAO,GAAID,SAAS,CAACgC,QAAQ,CAAC/B,OAAO,CAAC,CAAC,IAAI,EAAE,GAAIkD,MAAM,CAACC,MAAM,CAACpD,SAAS,CAAC,CAACsD,IAAI,CAAC,CAAC;MAC7F,MAAMZ,MAAM,GAAGW,IAAI,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QACrC,MAAMC,GAAG,GAAGD,CAAC,CAAC3C,YAAY,IAAI2C,CAAC,CAACE,IAAI,IAAI,SAAS;QACjD,IAAI,CAACH,GAAG,CAACE,GAAG,CAAC,EAAEF,GAAG,CAACE,GAAG,CAAC,GAAG;UAAE5D,EAAE,EAAE2D,CAAC,CAAC3D,EAAE;UAAE6D,IAAI,EAAED,GAAG;UAAE1C,SAAS,EAAEyC,CAAC,CAACzC,SAAS,IAAIyC,CAAC,CAACG,IAAI;UAAE3C,UAAU,EAAEwC,CAAC,CAACxC,UAAU,IAAI4C,IAAI,CAACC,KAAK,CAAE,CAACL,CAAC,CAACG,IAAI,IAAI,CAAC,IAAI,EAAE,GAAI,GAAG,CAAC,GAAG;QAAI,CAAC;QAC7J,OAAOJ,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MACN,OAAOO,MAAM,CAACC,MAAM,CAACV,MAAM,CAAC;IAC9B;EACF,CAAC;EAED,MAAMa,gBAAgBA,CAAC;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,WAAW;IAAExD;EAAa,CAAC,EAAE;IAC5E,MAAMyD,CAAC,GAAG,IAAIC,eAAe,CAAC,CAAC;IAC/B,IAAIJ,QAAQ,EAAEG,CAAC,CAACE,GAAG,CAAC,UAAU,EAAEL,QAAQ,CAAC;IACzC,IAAIC,YAAY,EAAEE,CAAC,CAACE,GAAG,CAAC,cAAc,EAAEJ,YAAY,CAAC;IACrD,IAAIC,WAAW,EAAEC,CAAC,CAACE,GAAG,CAAC,aAAa,EAAEH,WAAW,CAAC;IAClD,IAAIxD,YAAY,EAAEyD,CAAC,CAACE,GAAG,CAAC,cAAc,EAAE3D,YAAY,CAAC;IACrD,OAAO,MAAMzC,IAAI,CAAC,+BAA+BkG,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE;MAAEnG,MAAM,EAAE;IAAM,CAAC,CAAC;EACrF;AACF,CAAC;;AAED;AACA,OAAO,MAAMoG,eAAe,GAAG;EAC7B,MAAMC,iBAAiBA,CAACC,eAAe,EAAE;IACvC,IAAI;MACF,OAAO,MAAMxG,IAAI,CAAC,mBAAmB,EAAE;QACrCE,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEoG;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOtC,CAAC,EAAE;MACV,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,OAAO;QACL3B,EAAE,EAAEgC,IAAI,CAACC,GAAG,CAAC,CAAC;QACd,GAAG8C,eAAe;QAClBC,MAAM,EAAE,WAAW;QACnBC,YAAY,EAAE,IAAIjD,IAAI,CAAC,CAAC,CAACkD,WAAW,CAAC;MACvC,CAAC;IACH;EACF,CAAC;EAED,MAAMC,mBAAmBA,CAAA,EAAG;IAC1B,IAAI;MACF,OAAO,MAAM5G,IAAI,CAAC,mBAAmB,EAAE;QAAEE,MAAM,EAAE;MAAM,CAAC,CAAC;IAC3D,CAAC,CAAC,OAAOgE,CAAC,EAAE;MACV,MAAM,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MACtD,OAAO,EAAE;IACX;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMyD,WAAW,GAAG;EACzB,MAAMC,SAASA,CAAC;IAAEC,cAAc;IAAEC,aAAa,GAAG,CAAC;EAAE,CAAC,EAAE;IACtD,MAAMC,GAAG,GAAG,MAAMtG,KAAK,CAAC,GAAGf,YAAY,iCAAiC,EAAE;MACxEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUI,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;MAChE,CAAC;MACDJ,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAAC;QAAEkG,cAAc;QAAEC;MAAc,CAAC;IACxD,CAAC,CAAC;IACF,IAAI,CAACC,GAAG,CAAC7F,EAAE,EAAE,MAAM,IAAIG,KAAK,CAAC,CAAC,MAAM0F,GAAG,CAAC9F,IAAI,CAAC,CAAC,EAAEE,OAAO,IAAI,0BAA0B,CAAC;IACtF,OAAO4F,GAAG,CAAC9F,IAAI,CAAC,CAAC;EACnB,CAAC;EAED,MAAM+F,SAASA,CAAC;IAAEH;EAAe,CAAC,EAAE;IAClC,MAAME,GAAG,GAAG,MAAMtG,KAAK,CAAC,GAAGf,YAAY,mCAAmC,EAAE;MAC1EM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUI,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;MAChE,CAAC;MACDJ,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAAC;QAAEkG;MAAe,CAAC;IACzC,CAAC,CAAC;IACF,IAAI,CAACE,GAAG,CAAC7F,EAAE,EAAE,MAAM,IAAIG,KAAK,CAAC,CAAC,MAAM0F,GAAG,CAAC9F,IAAI,CAAC,CAAC,EAAEE,OAAO,IAAI,2BAA2B,CAAC;IACvF,OAAO4F,GAAG,CAAC9F,IAAI,CAAC,CAAC;EACnB;AACF,CAAC;;AAED;AACA,OAAO,MAAMgG,QAAQ,GAAGnD,SAAS;;AAEjC;AACA,OAAO,eAAeoD,YAAYA,CAAC;EAAE1F,KAAK,GAAG,gBAAgB;EAAEuB,QAAQ,GAAG;AAAW,CAAC,GAAG,CAAC,CAAC,EAAE;EAC3F;EACA,MAAM;IAAE3C,KAAK;IAAEgD;EAAK,CAAC,GAAG,MAAMP,OAAO,CAACC,KAAK,CAACtB,KAAK,EAAEuB,QAAQ,CAAC;EAC5D,IAAI,OAAO1C,YAAY,KAAK,WAAW,IAAID,KAAK,EAAE;IAChDC,YAAY,CAAC8G,OAAO,CAAC,OAAO,EAAE/G,KAAK,CAAC;EACtC;EACA;EACA,MAAMgH,MAAM,GAAG,MAAMtD,SAAS,CAACC,SAAS,CAAC,CAAC;EAC1C,OAAO;IAAEX,IAAI;IAAEgE;EAAO,CAAC;AACzB;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1B,MAAMC,YAAYA,CAAChF,OAAO,EAAE;IAC1B,MAAMvC,IAAI,GAAGuC,OAAO,GAAG,+BAA+BoC,kBAAkB,CAACpC,OAAO,CAAC,EAAE,GAAG,6BAA6B;IACnH,OAAO,MAAMxC,IAAI,CAACC,IAAI,EAAE;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMuH,kBAAkBA,CAACjF,OAAO,EAAE;IAChC,MAAMvC,IAAI,GAAGuC,OAAO,GAAG,mCAAmCoC,kBAAkB,CAACpC,OAAO,CAAC,EAAE,GAAG,iCAAiC;IAC3H,OAAO,MAAMxC,IAAI,CAACC,IAAI,EAAE;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMwH,kBAAkBA,CAAC;IAAEX,cAAc;IAAEY;EAAc,CAAC,EAAE;IAC1D,OAAO,MAAM3H,IAAI,CAAC,wBAAwB,EAAE;MAAEE,MAAM,EAAE,MAAM;MAAEE,IAAI,EAAE;QAAE2G,cAAc;QAAEY;MAAc;IAAE,CAAC,CAAC;EAC1G,CAAC;EAED,MAAMC,iBAAiBA,CAAC;IAAEb,cAAc;IAAEc;EAAa,CAAC,EAAE;IACxD,OAAO,MAAM7H,IAAI,CAAC,uBAAuB,EAAE;MAAEE,MAAM,EAAE,MAAM;MAAEE,IAAI,EAAE;QAAE2G,cAAc;QAAEc;MAAa;IAAE,CAAC,CAAC;EACxG,CAAC;EAED,MAAMC,cAAcA,CAACf,cAAc,EAAE;IACnC,OAAO,MAAM/G,IAAI,CAAC,0BAA0B4E,kBAAkB,CAACmC,cAAc,CAAC,EAAE,EAAE;MAAE7G,MAAM,EAAE;IAAM,CAAC,CAAC;EACtG,CAAC;EAED,MAAM6H,WAAWA,CAAChB,cAAc,EAAEiB,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9C,OAAO,MAAMhI,IAAI,CAAC,yBAAyB4E,kBAAkB,CAACmC,cAAc,CAAC,EAAE,EAAE;MAAE7G,MAAM,EAAE,MAAM;MAAEE,IAAI,EAAE4H;IAAQ,CAAC,CAAC;EACrH;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1B,MAAMC,SAASA,CAAC1F,OAAO,EAAE;IACvB;IACA;IACA,MAAMvC,IAAI,GAAG,gBAAgB,IAAIuC,OAAO,GAAG,aAAaoC,kBAAkB,CAACpC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC;IAC3F,OAAO,MAAMxC,IAAI,CAACC,IAAI,EAAE;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMiI,UAAUA,CAAC;IAAEpC,QAAQ;IAAEqC,UAAU;IAAEhG,WAAW;IAAEiG,QAAQ,GAAG;EAAU,CAAC,EAAE;IAC5E,OAAO,MAAMrI,IAAI,CAAC,gBAAgB,EAAE;MAAEE,MAAM,EAAE,MAAM;MAAEE,IAAI,EAAE;QAAE2F,QAAQ;QAAEqC,UAAU;QAAEhG,WAAW;QAAEiG;MAAS;IAAE,CAAC,CAAC;EAChH,CAAC;EAED,MAAMC,SAASA,CAACC,QAAQ,EAAE9B,MAAM,EAAE;IAChC,OAAO,MAAMzG,IAAI,CAAC,kBAAkB4E,kBAAkB,CAAC2D,QAAQ,CAAC,SAAS,EAAE;MAAErI,MAAM,EAAE,OAAO;MAAEE,IAAI,EAAE;QAAEqG;MAAO;IAAE,CAAC,CAAC;EACnH,CAAC;EAED,MAAM+B,QAAQA,CAACD,QAAQ,EAAEE,QAAQ,EAAE;IACjC,OAAO,MAAMzI,IAAI,CAAC,kBAAkB4E,kBAAkB,CAAC2D,QAAQ,CAAC,WAAW,EAAE;MAAErI,MAAM,EAAE,OAAO;MAAEE,IAAI,EAAE;QAAEqI;MAAS;IAAE,CAAC,CAAC;EACvH,CAAC;EAED,MAAMC,cAAcA,CAAClG,OAAO,EAAE;IAC5B,MAAMvC,IAAI,GAAGuC,OAAO,GAAG,+BAA+BoC,kBAAkB,CAACpC,OAAO,CAAC,EAAE,GAAG,6BAA6B;IACnH,OAAO,MAAMxC,IAAI,CAACC,IAAI,EAAE;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EAC5C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}