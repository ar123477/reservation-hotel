{"ast":null,"code":"var _s = $RefreshSig$();\n// src/pages/Reservation.js - VERSION CONNECTÉE\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../services/auth';\nimport { hotelsAPI, roomsAPI, reservationsAPI } from '../services/api';\nimport { useApiData } from '../hooks/useApiData';\nimport { adaptHotelData, adaptRoomData } from '../utils/dataAdapter';\nimport ReservationType from '../components/reservation/ReservationType';\nimport DateSelector from '../components/reservation/DateSelector';\nimport ClientForm from '../components/reservation/ClientForm';\nconst Reservation = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const searchParams = new URLSearchParams(location.search);\n\n  // États de la réservation\n  const [reservation, setReservation] = useState({\n    hotel: null,\n    room: null,\n    type: searchParams.get('type') || 'classique',\n    dates: {\n      arrivee: '',\n      depart: '',\n      heures: 0\n    },\n    client: {\n      nom: (user === null || user === void 0 ? void 0 : user.nom) || '',\n      prenom: (user === null || user === void 0 ? void 0 : user.prenom) || '',\n      email: (user === null || user === void 0 ? void 0 : user.email) || '',\n      telephone: (user === null || user === void 0 ? void 0 : user.telephone) || '',\n      pays: 'Togo',\n      notes: ''\n    },\n    montantTotal: 0\n  });\n  const [currentStep, setCurrentStep] = useState(1);\n  const [calculating, setCalculating] = useState(false);\n\n  // Charger les hôtels depuis votre backend\n  const {\n    data: hotels\n  } = useApiData(() => hotelsAPI.getAll(), backendData => backendData.map(adaptHotelData));\n\n  // Charger les types de chambres depuis votre backend\n  const {\n    data: roomTypes\n  } = useApiData(() => roomsAPI.getTypes(), backendData => backendData.map(adaptRoomData));\n\n  // Charger les données initiales depuis l'URL\n  useEffect(() => {\n    const hotelId = searchParams.get('hotel');\n    const roomId = searchParams.get('room');\n    if (hotelId && hotels) {\n      const selectedHotel = hotels.find(h => h.id === parseInt(hotelId));\n      if (selectedHotel) setReservation(prev => ({\n        ...prev,\n        hotel: selectedHotel\n      }));\n    }\n    if (roomId && roomTypes) {\n      const selectedRoom = roomTypes.find(r => r.id === parseInt(roomId));\n      if (selectedRoom) setReservation(prev => ({\n        ...prev,\n        room: selectedRoom\n      }));\n    }\n  }, [location.search, hotels, roomTypes]);\n\n  // Calculer le montant total\n  useEffect(() => {\n    if (reservation.room && reservation.dates.arrivee) {\n      calculateTotal();\n    }\n  }, [reservation.room, reservation.type, reservation.dates]);\n  const calculateTotal = () => {\n    setCalculating(true);\n    setTimeout(() => {\n      let total = 0;\n      const {\n        room,\n        type,\n        dates\n      } = reservation;\n      if (type === 'horaire') {\n        total = dates.heures * room.prix_heure;\n      } else {\n        const dateArrivee = new Date(dates.arrivee);\n        const dateDepart = new Date(dates.depart);\n        const jours = Math.ceil((dateDepart - dateArrivee) / (1000 * 60 * 60 * 24));\n        total = jours * room.prix_nuit;\n      }\n      setReservation(prev => ({\n        ...prev,\n        montantTotal: Math.round(total * 100) / 100\n      }));\n      setCalculating(false);\n    }, 500);\n  };\n  const handleReservationSubmit = async () => {\n    try {\n      const reservationData = {\n        hotel_id: reservation.hotel.id,\n        type_chambre: reservation.room.type,\n        date_arrivee: reservation.dates.arrivee,\n        date_depart: reservation.type === 'classique' ? reservation.dates.depart : null,\n        duree_heures: reservation.type === 'horaire' ? reservation.dates.heures : null,\n        type_reservation: reservation.type,\n        client: reservation.client,\n        montant_total: reservation.montantTotal\n      };\n      const result = await reservationsAPI.create(reservationData);\n\n      // Rediriger vers la page de paiement\n      navigate('/paiement', {\n        state: {\n          reservation: {\n            ...reservation,\n            id: result.id,\n            numero_reservation: result.numero_reservation\n          }\n        }\n      });\n    } catch (error) {\n      alert(`Erreur lors de la réservation: ${error.message}`);\n    }\n  };\n\n  // ... reste du code identique jusqu'aux actions\n\n  const handleNextStep = () => {\n    if (currentStep === 1 && validateStep1()) {\n      setCurrentStep(2);\n    } else if (currentStep === 2 && validateStep2()) {\n      handleReservationSubmit();\n    }\n  };\n\n  // ... reste du composant identique\n};\n_s(Reservation, \"66o1zJzkzi6rX2tmHD3D+wpe0sc=\", false, function () {\n  return [useLocation, useNavigate, useAuth, useApiData, useApiData];\n});\n_c = Reservation;\nexport default Reservation;\nvar _c;\n$RefreshReg$(_c, \"Reservation\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useAuth","hotelsAPI","roomsAPI","reservationsAPI","useApiData","adaptHotelData","adaptRoomData","ReservationType","DateSelector","ClientForm","Reservation","_s","location","navigate","user","searchParams","URLSearchParams","search","reservation","setReservation","hotel","room","type","get","dates","arrivee","depart","heures","client","nom","prenom","email","telephone","pays","notes","montantTotal","currentStep","setCurrentStep","calculating","setCalculating","data","hotels","getAll","backendData","map","roomTypes","getTypes","hotelId","roomId","selectedHotel","find","h","id","parseInt","prev","selectedRoom","r","calculateTotal","setTimeout","total","prix_heure","dateArrivee","Date","dateDepart","jours","Math","ceil","prix_nuit","round","handleReservationSubmit","reservationData","hotel_id","type_chambre","date_arrivee","date_depart","duree_heures","type_reservation","montant_total","result","create","state","numero_reservation","error","alert","message","handleNextStep","validateStep1","validateStep2","_c","$RefreshReg$"],"sources":["C:/Users/HOME/Videos/reservation-hotel/frontend/src/pages/Reservation.js"],"sourcesContent":["// src/pages/Reservation.js - VERSION CONNECTÉE\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../services/auth';\r\nimport { hotelsAPI, roomsAPI, reservationsAPI } from '../services/api';\r\nimport { useApiData } from '../hooks/useApiData';\r\nimport { adaptHotelData, adaptRoomData } from '../utils/dataAdapter';\r\nimport ReservationType from '../components/reservation/ReservationType';\r\nimport DateSelector from '../components/reservation/DateSelector';\r\nimport ClientForm from '../components/reservation/ClientForm';\r\n\r\nconst Reservation = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  \r\n  // États de la réservation\r\n  const [reservation, setReservation] = useState({\r\n    hotel: null,\r\n    room: null,\r\n    type: searchParams.get('type') || 'classique',\r\n    dates: {\r\n      arrivee: '',\r\n      depart: '',\r\n      heures: 0\r\n    },\r\n    client: {\r\n      nom: user?.nom || '',\r\n      prenom: user?.prenom || '',\r\n      email: user?.email || '',\r\n      telephone: user?.telephone || '',\r\n      pays: 'Togo',\r\n      notes: ''\r\n    },\r\n    montantTotal: 0\r\n  });\r\n\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const [calculating, setCalculating] = useState(false);\r\n\r\n  // Charger les hôtels depuis votre backend\r\n  const { data: hotels } = useApiData(\r\n    () => hotelsAPI.getAll(),\r\n    (backendData) => backendData.map(adaptHotelData)\r\n  );\r\n\r\n  // Charger les types de chambres depuis votre backend\r\n  const { data: roomTypes } = useApiData(\r\n    () => roomsAPI.getTypes(),\r\n    (backendData) => backendData.map(adaptRoomData)\r\n  );\r\n\r\n  // Charger les données initiales depuis l'URL\r\n  useEffect(() => {\r\n    const hotelId = searchParams.get('hotel');\r\n    const roomId = searchParams.get('room');\r\n    \r\n    if (hotelId && hotels) {\r\n      const selectedHotel = hotels.find(h => h.id === parseInt(hotelId));\r\n      if (selectedHotel) setReservation(prev => ({ ...prev, hotel: selectedHotel }));\r\n    }\r\n    \r\n    if (roomId && roomTypes) {\r\n      const selectedRoom = roomTypes.find(r => r.id === parseInt(roomId));\r\n      if (selectedRoom) setReservation(prev => ({ ...prev, room: selectedRoom }));\r\n    }\r\n  }, [location.search, hotels, roomTypes]);\r\n\r\n  // Calculer le montant total\r\n  useEffect(() => {\r\n    if (reservation.room && reservation.dates.arrivee) {\r\n      calculateTotal();\r\n    }\r\n  }, [reservation.room, reservation.type, reservation.dates]);\r\n\r\n  const calculateTotal = () => {\r\n    setCalculating(true);\r\n    \r\n    setTimeout(() => {\r\n      let total = 0;\r\n      const { room, type, dates } = reservation;\r\n      \r\n      if (type === 'horaire') {\r\n        total = dates.heures * room.prix_heure;\r\n      } else {\r\n        const dateArrivee = new Date(dates.arrivee);\r\n        const dateDepart = new Date(dates.depart);\r\n        const jours = Math.ceil((dateDepart - dateArrivee) / (1000 * 60 * 60 * 24));\r\n        total = jours * room.prix_nuit;\r\n      }\r\n      \r\n      setReservation(prev => ({ ...prev, montantTotal: Math.round(total * 100) / 100 }));\r\n      setCalculating(false);\r\n    }, 500);\r\n  };\r\n\r\n  const handleReservationSubmit = async () => {\r\n    try {\r\n      const reservationData = {\r\n        hotel_id: reservation.hotel.id,\r\n        type_chambre: reservation.room.type,\r\n        date_arrivee: reservation.dates.arrivee,\r\n        date_depart: reservation.type === 'classique' ? reservation.dates.depart : null,\r\n        duree_heures: reservation.type === 'horaire' ? reservation.dates.heures : null,\r\n        type_reservation: reservation.type,\r\n        client: reservation.client,\r\n        montant_total: reservation.montantTotal\r\n      };\r\n\r\n      const result = await reservationsAPI.create(reservationData);\r\n      \r\n      // Rediriger vers la page de paiement\r\n      navigate('/paiement', { \r\n        state: { \r\n          reservation: {\r\n            ...reservation,\r\n            id: result.id,\r\n            numero_reservation: result.numero_reservation\r\n          }\r\n        } \r\n      });\r\n      \r\n    } catch (error) {\r\n      alert(`Erreur lors de la réservation: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // ... reste du code identique jusqu'aux actions\r\n\r\n  const handleNextStep = () => {\r\n    if (currentStep === 1 && validateStep1()) {\r\n      setCurrentStep(2);\r\n    } else if (currentStep === 2 && validateStep2()) {\r\n      handleReservationSubmit();\r\n    }\r\n  };\r\n\r\n  // ... reste du composant identique\r\n};\r\n\r\nexport default Reservation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}