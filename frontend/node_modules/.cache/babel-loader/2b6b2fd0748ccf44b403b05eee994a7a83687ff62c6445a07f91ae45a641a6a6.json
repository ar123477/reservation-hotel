{"ast":null,"code":"// src/services/api.js - CORRECTION DES FONCTIONS ROOMS\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Petit client HTTP avec en-tête Authorization automatique\nasync function http(path, {\n  method = 'GET',\n  headers = {},\n  body,\n  auth = true\n} = {}) {\n  const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n  const mergedHeaders = {\n    'Content-Type': 'application/json',\n    ...(auth && token ? {\n      'Authorization': `Bearer ${token}`\n    } : {}),\n    ...headers\n  };\n  const response = await fetch(`${API_BASE_URL}${path}`, {\n    method,\n    headers: mergedHeaders,\n    body: body ? JSON.stringify(body) : undefined\n  });\n  const isJson = (response.headers.get('content-type') || '').includes('application/json');\n  const data = isJson ? await response.json() : null;\n  if (!response.ok) {\n    const message = data && data.message ? data.message : `Erreur HTTP ${response.status}`;\n    throw new Error(message);\n  }\n  return data;\n}\n\n// Données mock pour le développement avec vraies images\nconst mockUsers = [{\n  id: 1,\n  email: 'admin@test.com',\n  name: 'Admin Test',\n  role: 'super_admin'\n}];\nconst mockHotels = [{\n  id: 1,\n  nom: \"Hôtel Sarakawa\",\n  adresse: \"Boulevard du Mono, Lomé\",\n  telephone: \"+228 22 21 45 00\",\n  email: \"reservation@sarakawa.tg\",\n  note: 4.5,\n  prix_min: 55000,\n  images: ['https://images.unsplash.com/photo-1566073771259-6a8506099945?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=500&h=300&fit=crop'],\n  description: \"Hôtel de luxe emblématique face à l'océan avec casino et golf. Cadre exceptionnel pour un séjour mémorable.\",\n  equipements: ['Casino', 'Golf', 'Piscine', 'Spa', 'Plage privée', 'Wi-Fi', 'Restaurant', 'Bar'],\n  ville: \"Lomé\"\n}, {\n  id: 2,\n  nom: \"Hôtel du 2 Février\",\n  adresse: \"Rue des Nimes, Lomé\",\n  telephone: \"+228 22 23 18 00\",\n  email: \"contact@hotel2fevrier.tg\",\n  note: 4.3,\n  prix_min: 45000,\n  images: ['https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=500&h=300&fit=crop', 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=500&h=300&fit=crop'],\n  description: \"Hôtel d'affaires moderne au cœur de la capitale. Idéal pour voyages professionnels.\",\n  equipements: ['Piscine', 'Salle de conférence', 'Restaurant', 'Wi-Fi', 'Fitness', 'Room Service'],\n  ville: \"Lomé\"\n}];\nconst mockRooms = {\n  1: [\n  // Chambres pour l'hôtel Sarakawa\n  {\n    id: 1,\n    hotelId: 1,\n    type_chambre: \"Chambre Standard\",\n    superficie: \"35m²\",\n    prix_nuit: 55000,\n    prix_heure: 18000,\n    capacite: \"2 personnes\",\n    image: 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400&h=250&fit=crop',\n    equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Salle de bain privée\"]\n  }, {\n    id: 2,\n    hotelId: 1,\n    type_chambre: \"Suite Deluxe\",\n    superficie: \"60m²\",\n    prix_nuit: 85000,\n    prix_heure: 28000,\n    capacite: \"3 personnes\",\n    image: 'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=400&h=250&fit=crop',\n    equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Mini-bar\", \"Spa\", \"Vue mer\"]\n  }],\n  2: [\n  // Chambres pour l'hôtel 2 Février\n  {\n    id: 3,\n    hotelId: 2,\n    type_chambre: \"Chambre Affaires\",\n    superficie: \"30m²\",\n    prix_nuit: 45000,\n    prix_heure: 15000,\n    capacite: \"2 personnes\",\n    image: 'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=400&h=250&fit=crop',\n    equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"Bureau\", \"Salle de bain privée\"]\n  }]\n};\n\n// API d'authentification\nexport const authAPI = {\n  async login(email, password) {\n    try {\n      const data = await http('/api/authentification/connecter', {\n        method: 'POST',\n        auth: false,\n        body: {\n          email,\n          password\n        }\n      });\n      return data; // { token, user }\n    } catch (e) {\n      // Fallback mock en dev\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const user = mockUsers.find(u => u.email === email);\n      if (user && password === 'password') {\n        return {\n          token: 'mock-jwt-token-' + Date.now(),\n          user\n        };\n      }\n      throw e;\n    }\n  },\n  async register(userData) {\n    try {\n      const data = await http('/api/authentification/inscrire', {\n        method: 'POST',\n        auth: false,\n        body: userData\n      });\n      return data; // { token, user }\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newUser = {\n        id: mockUsers.length + 1,\n        ...userData,\n        role: 'client'\n      };\n      return {\n        token: 'mock-jwt-token-' + Date.now(),\n        user: newUser\n      };\n    }\n  },\n  async getProfile() {\n    try {\n      return await http('/api/authentification/profil', {\n        method: 'GET',\n        auth: true\n      });\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n      if (!token) throw e;\n      return mockUsers[0];\n    }\n  }\n};\n\n// API des hôtels\nexport const hotelsAPI = {\n  async getHotels() {\n    try {\n      return await http('/api/hotels', {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n  async getAll() {\n    try {\n      return await http('/api/hotels', {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n  async getHotelById(id) {\n    try {\n      return await http(`/api/hotels/${id}`, {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      const hotel = mockHotels.find(h => h.id === parseInt(id));\n      if (!hotel) throw new Error('Hôtel non trouvé');\n      return hotel;\n    }\n  },\n  // ALIAS pour compatibilité\n  async getById(id) {\n    return this.getHotelById(id);\n  }\n};\n\n// API des chambres - CORRECTION DES FONCTIONS\nexport const roomsAPI = {\n  async getRoomsByHotel(hotelId) {\n    try {\n      const query = `?hotel_id=${encodeURIComponent(hotelId)}`;\n      return await http(`/api/chambres${query}`, {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      return mockRooms[parseInt(hotelId)] || [];\n    }\n  },\n  // CORRECTION : Cette fonction doit être définie correctement\n  async getByHotel(hotelId) {\n    return this.getRoomsByHotel(hotelId);\n  }\n};\n\n// API des réservations\nexport const reservationsAPI = {\n  async createReservation(reservationData) {\n    try {\n      return await http('/api/reservations', {\n        method: 'POST',\n        body: reservationData\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 250));\n      return {\n        id: Date.now(),\n        ...reservationData,\n        statut: 'confirmée',\n        dateCreation: new Date().toISOString()\n      };\n    }\n  },\n  async getUserReservations() {\n    try {\n      return await http('/api/reservations', {\n        method: 'GET'\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return [];\n    }\n  }\n};\n\n// API des paiements\nexport const paymentsAPI = {\n  async payOnline({\n    reservation_id,\n    details_carte = {}\n  }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/simuler-paiement`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({\n        reservation_id,\n        details_carte\n      })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement en ligne');\n    return res.json();\n  },\n  async payOnSite({\n    reservation_id\n  }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/paiement-sur-place`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({\n        reservation_id\n      })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement sur place');\n    return res.json();\n  }\n};\n\n// API hôtel (alias pour hotelsAPI pour compatibilité)\nexport const hotelAPI = hotelsAPI;\n\n// Fonction utilitaire de smoke test (dev uniquement)\nexport async function devSmokeTest({\n  email = 'admin@test.com',\n  password = 'password'\n} = {}) {\n  // 1) Login\n  const {\n    token,\n    user\n  } = await authAPI.login(email, password);\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem('token', token);\n  }\n  // 2) Charger les hôtels\n  const hotels = await hotelsAPI.getHotels();\n  return {\n    user,\n    hotels\n  };\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","http","path","method","headers","body","auth","token","localStorage","getItem","mergedHeaders","response","fetch","JSON","stringify","undefined","isJson","get","includes","data","json","ok","message","status","Error","mockUsers","id","email","name","role","mockHotels","nom","adresse","telephone","note","prix_min","images","description","equipements","ville","mockRooms","hotelId","type_chambre","superficie","prix_nuit","prix_heure","capacite","image","authAPI","login","password","e","Promise","resolve","setTimeout","user","find","u","Date","now","register","userData","newUser","length","getProfile","hotelsAPI","getHotels","_","getAll","getHotelById","hotel","h","parseInt","getById","roomsAPI","getRoomsByHotel","query","encodeURIComponent","getByHotel","reservationsAPI","createReservation","reservationData","statut","dateCreation","toISOString","getUserReservations","paymentsAPI","payOnline","reservation_id","details_carte","res","payOnSite","hotelAPI","devSmokeTest","setItem","hotels"],"sources":["C:/Users/HOME/Videos/reservation-hotel/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js - CORRECTION DES FONCTIONS ROOMS\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Petit client HTTP avec en-tête Authorization automatique\nasync function http(path, { method = 'GET', headers = {}, body, auth = true } = {}) {\n  const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n  const mergedHeaders = {\n    'Content-Type': 'application/json',\n    ...(auth && token ? { 'Authorization': `Bearer ${token}` } : {}),\n    ...headers\n  };\n\n  const response = await fetch(`${API_BASE_URL}${path}`, {\n    method,\n    headers: mergedHeaders,\n    body: body ? JSON.stringify(body) : undefined\n  });\n\n  const isJson = (response.headers.get('content-type') || '').includes('application/json');\n  const data = isJson ? await response.json() : null;\n  if (!response.ok) {\n    const message = data && data.message ? data.message : `Erreur HTTP ${response.status}`;\n    throw new Error(message);\n  }\n  return data;\n}\n\n// Données mock pour le développement avec vraies images\nconst mockUsers = [\n  {\n    id: 1,\n    email: 'admin@test.com',\n    name: 'Admin Test',\n    role: 'super_admin'\n  }\n];\n\nconst mockHotels = [\n  {\n    id: 1,\n    nom: \"Hôtel Sarakawa\",\n    adresse: \"Boulevard du Mono, Lomé\",\n    telephone: \"+228 22 21 45 00\",\n    email: \"reservation@sarakawa.tg\",\n    note: 4.5,\n    prix_min: 55000,\n    images: [\n      'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=500&h=300&fit=crop'\n    ],\n    description: \"Hôtel de luxe emblématique face à l'océan avec casino et golf. Cadre exceptionnel pour un séjour mémorable.\",\n    equipements: ['Casino', 'Golf', 'Piscine', 'Spa', 'Plage privée', 'Wi-Fi', 'Restaurant', 'Bar'],\n    ville: \"Lomé\"\n  },\n  {\n    id: 2,\n    nom: \"Hôtel du 2 Février\",\n    adresse: \"Rue des Nimes, Lomé\",\n    telephone: \"+228 22 23 18 00\",\n    email: \"contact@hotel2fevrier.tg\",\n    note: 4.3,\n    prix_min: 45000,\n    images: [\n      'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=500&h=300&fit=crop',\n      'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=500&h=300&fit=crop'\n    ],\n    description: \"Hôtel d'affaires moderne au cœur de la capitale. Idéal pour voyages professionnels.\",\n    equipements: ['Piscine', 'Salle de conférence', 'Restaurant', 'Wi-Fi', 'Fitness', 'Room Service'],\n    ville: \"Lomé\"\n  }\n];\n\nconst mockRooms = {\n  1: [ // Chambres pour l'hôtel Sarakawa\n    {\n      id: 1,\n      hotelId: 1,\n      type_chambre: \"Chambre Standard\",\n      superficie: \"35m²\",\n      prix_nuit: 55000,\n      prix_heure: 18000,\n      capacite: \"2 personnes\",\n      image: 'https://images.unsplash.com/photo-1631049307264-da0ec9d70304?w=400&h=250&fit=crop',\n      equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Salle de bain privée\"]\n    },\n    {\n      id: 2,\n      hotelId: 1,\n      type_chambre: \"Suite Deluxe\",\n      superficie: \"60m²\",\n      prix_nuit: 85000,\n      prix_heure: 28000,\n      capacite: \"3 personnes\",\n      image: 'https://images.unsplash.com/photo-1584132967334-10e028bd69f7?w=400&h=250&fit=crop',\n      equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"TV écran plat\", \"Mini-bar\", \"Spa\", \"Vue mer\"]\n    }\n  ],\n  2: [ // Chambres pour l'hôtel 2 Février\n    {\n      id: 3,\n      hotelId: 2,\n      type_chambre: \"Chambre Affaires\",\n      superficie: \"30m²\",\n      prix_nuit: 45000,\n      prix_heure: 15000,\n      capacite: \"2 personnes\",\n      image: 'https://images.unsplash.com/photo-1611892440504-42a792e24d32?w=400&h=250&fit=crop',\n      equipements: [\"Wi-Fi gratuit\", \"Climatisation\", \"Bureau\", \"Salle de bain privée\"]\n    }\n  ]\n};\n\n// API d'authentification\nexport const authAPI = {\n  async login(email, password) {\n    try {\n      const data = await http('/api/authentification/connecter', {\n        method: 'POST',\n        auth: false,\n        body: { email, password }\n      });\n      return data; // { token, user }\n    } catch (e) {\n      // Fallback mock en dev\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const user = mockUsers.find(u => u.email === email);\n      if (user && password === 'password') {\n        return { token: 'mock-jwt-token-' + Date.now(), user };\n      }\n      throw e;\n    }\n  },\n\n  async register(userData) {\n    try {\n      const data = await http('/api/authentification/inscrire', {\n        method: 'POST',\n        auth: false,\n        body: userData\n      });\n      return data; // { token, user }\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newUser = { id: mockUsers.length + 1, ...userData, role: 'client' };\n      return { token: 'mock-jwt-token-' + Date.now(), user: newUser };\n    }\n  },\n\n  async getProfile() {\n    try {\n      return await http('/api/authentification/profil', { method: 'GET', auth: true });\n    } catch (e) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const token = typeof localStorage !== 'undefined' ? localStorage.getItem('token') : null;\n      if (!token) throw e;\n      return mockUsers[0];\n    }\n  }\n};\n\n// API des hôtels\nexport const hotelsAPI = {\n  async getHotels() {\n    try {\n      return await http('/api/hotels', { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n\n  async getAll() {\n    try {\n      return await http('/api/hotels', { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return mockHotels;\n    }\n  },\n\n  async getHotelById(id) {\n    try {\n      return await http(`/api/hotels/${id}`, { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      const hotel = mockHotels.find(h => h.id === parseInt(id));\n      if (!hotel) throw new Error('Hôtel non trouvé');\n      return hotel;\n    }\n  },\n\n  // ALIAS pour compatibilité\n  async getById(id) {\n    return this.getHotelById(id);\n  }\n};\n\n// API des chambres - CORRECTION DES FONCTIONS\nexport const roomsAPI = {\n  async getRoomsByHotel(hotelId) {\n    try {\n      const query = `?hotel_id=${encodeURIComponent(hotelId)}`;\n      return await http(`/api/chambres${query}`, { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 150));\n      return mockRooms[parseInt(hotelId)] || [];\n    }\n  },\n\n  // CORRECTION : Cette fonction doit être définie correctement\n  async getByHotel(hotelId) {\n    return this.getRoomsByHotel(hotelId);\n  }\n};\n\n// API des réservations\nexport const reservationsAPI = {\n  async createReservation(reservationData) {\n    try {\n      return await http('/api/reservations', {\n        method: 'POST',\n        body: reservationData\n      });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 250));\n      return {\n        id: Date.now(),\n        ...reservationData,\n        statut: 'confirmée',\n        dateCreation: new Date().toISOString()\n      };\n    }\n  },\n\n  async getUserReservations() {\n    try {\n      return await http('/api/reservations', { method: 'GET' });\n    } catch (_) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return [];\n    }\n  }\n};\n\n// API des paiements\nexport const paymentsAPI = {\n  async payOnline({ reservation_id, details_carte = {} }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/simuler-paiement`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({ reservation_id, details_carte })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement en ligne');\n    return res.json();\n  },\n\n  async payOnSite({ reservation_id }) {\n    const res = await fetch(`${API_BASE_URL}/api/paiements/paiement-sur-place`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n      },\n      body: JSON.stringify({ reservation_id })\n    });\n    if (!res.ok) throw new Error((await res.json()).message || 'Erreur paiement sur place');\n    return res.json();\n  }\n};\n\n// API hôtel (alias pour hotelsAPI pour compatibilité)\nexport const hotelAPI = hotelsAPI;\n\n// Fonction utilitaire de smoke test (dev uniquement)\nexport async function devSmokeTest({ email = 'admin@test.com', password = 'password' } = {}) {\n  // 1) Login\n  const { token, user } = await authAPI.login(email, password);\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem('token', token);\n  }\n  // 2) Charger les hôtels\n  const hotels = await hotelsAPI.getHotels();\n  return { user, hotels };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}