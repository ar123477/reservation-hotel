{"ast":null,"code":"// src/services/api.js - VERSION COMPLÈTE MOCK\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Données mock pour le développement\nconst mockUsers = [{\n  id: 1,\n  email: 'admin@test.com',\n  name: 'Admin Test',\n  role: 'super_admin'\n}];\nconst mockHotels = [{\n  id: 1,\n  nom: \"Hôtel Sarakawa\",\n  adresse: \"Boulevard du Mono, Lomé\",\n  note: 4.5,\n  prix_min: 55000,\n  images: ['/images/hotels/sarakawa-1.jpg'],\n  description: \"Hôtel de luxe emblématique face à l'océan\",\n  equipements: ['Piscine', 'Spa', 'Plage privée', 'Wi-Fi'],\n  ville: \"Lomé\"\n}];\nconst mockReservations = [{\n  id: 1,\n  hotelId: 1,\n  userId: 1,\n  dateDebut: '2025-01-15',\n  dateFin: '2025-01-20',\n  statut: 'confirmée'\n}];\n\n// API d'authentification\nexport const authAPI = {\n  async login(email, password) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const user = mockUsers.find(u => u.email === email);\n    if (user && password === 'password') {\n      return {\n        token: 'mock-jwt-token-' + Date.now(),\n        user: user\n      };\n    }\n    throw new Error('Email ou mot de passe incorrect');\n  },\n  async register(userData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const newUser = {\n      id: mockUsers.length + 1,\n      ...userData,\n      role: 'client'\n    };\n    return {\n      token: 'mock-jwt-token-' + Date.now(),\n      user: newUser\n    };\n  },\n  async getProfile() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token d\\'accès requis');\n    }\n    return mockUsers[0];\n  }\n};\n\n// API des hôtels\nexport const hotelsAPI = {\n  async getHotels() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockHotels;\n  },\n  async getHotelById(id) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const hotel = mockHotels.find(h => h.id === parseInt(id));\n    if (!hotel) throw new Error('Hôtel non trouvé');\n    return hotel;\n  }\n};\n\n// API des chambres\nexport const roomsAPI = {\n  async getRoomsByHotel(hotelId) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return [{\n      id: 1,\n      hotelId: parseInt(hotelId),\n      type: 'SIMPLE',\n      prix: 25000,\n      disponible: true\n    }, {\n      id: 2,\n      hotelId: parseInt(hotelId),\n      type: 'DOUBLE',\n      prix: 35000,\n      disponible: true\n    }];\n  }\n};\n\n// API des réservations\nexport const reservationsAPI = {\n  async createReservation(reservationData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const newReservation = {\n      id: mockReservations.length + 1,\n      ...reservationData,\n      statut: 'confirmée',\n      dateCreation: new Date().toISOString()\n    };\n    mockReservations.push(newReservation);\n    return newReservation;\n  },\n  async getUserReservations() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockReservations;\n  },\n  async cancelReservation(reservationId) {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const index = mockReservations.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      mockReservations[index].statut = 'annulée';\n    }\n    return {\n      success: true\n    };\n  }\n};\n\n// API des paiements\nexport const paymentsAPI = {\n  async processPayment(paymentData) {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    return {\n      success: true,\n      transactionId: 'txn_' + Date.now(),\n      message: 'Paiement réussi'\n    };\n  }\n};\n\n// API hôtel (alias pour hotelsAPI pour compatibilité)\nexport const hotelAPI = hotelsAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","mockUsers","id","email","name","role","mockHotels","nom","adresse","note","prix_min","images","description","equipements","ville","mockReservations","hotelId","userId","dateDebut","dateFin","statut","authAPI","login","password","Promise","resolve","setTimeout","user","find","u","token","Date","now","Error","register","userData","newUser","length","getProfile","localStorage","getItem","hotelsAPI","getHotels","getHotelById","hotel","h","parseInt","roomsAPI","getRoomsByHotel","type","prix","disponible","reservationsAPI","createReservation","reservationData","newReservation","dateCreation","toISOString","push","getUserReservations","cancelReservation","reservationId","index","findIndex","r","success","paymentsAPI","processPayment","paymentData","transactionId","message","hotelAPI"],"sources":["C:/Users/HOME/Videos/reservation-hotel/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js - VERSION COMPLÈTE MOCK\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Données mock pour le développement\nconst mockUsers = [\n  {\n    id: 1,\n    email: 'admin@test.com',\n    name: 'Admin Test',\n    role: 'super_admin'\n  }\n];\n\nconst mockHotels = [\n  {\n    id: 1,\n    nom: \"Hôtel Sarakawa\",\n    adresse: \"Boulevard du Mono, Lomé\",\n    note: 4.5,\n    prix_min: 55000,\n    images: ['/images/hotels/sarakawa-1.jpg'],\n    description: \"Hôtel de luxe emblématique face à l'océan\",\n    equipements: ['Piscine', 'Spa', 'Plage privée', 'Wi-Fi'],\n    ville: \"Lomé\"\n  }\n];\n\nconst mockReservations = [\n  {\n    id: 1,\n    hotelId: 1,\n    userId: 1,\n    dateDebut: '2025-01-15',\n    dateFin: '2025-01-20',\n    statut: 'confirmée'\n  }\n];\n\n// API d'authentification\nexport const authAPI = {\n  async login(email, password) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const user = mockUsers.find(u => u.email === email);\n    if (user && password === 'password') {\n      return {\n        token: 'mock-jwt-token-' + Date.now(),\n        user: user\n      };\n    }\n    throw new Error('Email ou mot de passe incorrect');\n  },\n\n  async register(userData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const newUser = {\n      id: mockUsers.length + 1,\n      ...userData,\n      role: 'client'\n    };\n    \n    return {\n      token: 'mock-jwt-token-' + Date.now(),\n      user: newUser\n    };\n  },\n\n  async getProfile() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token d\\'accès requis');\n    }\n\n    return mockUsers[0];\n  }\n};\n\n// API des hôtels\nexport const hotelsAPI = {\n  async getHotels() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockHotels;\n  },\n\n  async getHotelById(id) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const hotel = mockHotels.find(h => h.id === parseInt(id));\n    if (!hotel) throw new Error('Hôtel non trouvé');\n    return hotel;\n  }\n};\n\n// API des chambres\nexport const roomsAPI = {\n  async getRoomsByHotel(hotelId) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return [\n      {\n        id: 1,\n        hotelId: parseInt(hotelId),\n        type: 'SIMPLE',\n        prix: 25000,\n        disponible: true\n      },\n      {\n        id: 2,\n        hotelId: parseInt(hotelId),\n        type: 'DOUBLE',\n        prix: 35000,\n        disponible: true\n      }\n    ];\n  }\n};\n\n// API des réservations\nexport const reservationsAPI = {\n  async createReservation(reservationData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const newReservation = {\n      id: mockReservations.length + 1,\n      ...reservationData,\n      statut: 'confirmée',\n      dateCreation: new Date().toISOString()\n    };\n    \n    mockReservations.push(newReservation);\n    return newReservation;\n  },\n\n  async getUserReservations() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockReservations;\n  },\n\n  async cancelReservation(reservationId) {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const index = mockReservations.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      mockReservations[index].statut = 'annulée';\n    }\n    return { success: true };\n  }\n};\n\n// API des paiements\nexport const paymentsAPI = {\n  async processPayment(paymentData) {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    return {\n      success: true,\n      transactionId: 'txn_' + Date.now(),\n      message: 'Paiement réussi'\n    };\n  }\n};\n\n// API hôtel (alias pour hotelsAPI pour compatibilité)\nexport const hotelAPI = hotelsAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}