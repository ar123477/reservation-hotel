{"ast":null,"code":"// src/services/api.js - VERSION MOCK TEMPORAIRE\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Données mock pour le développement\nconst mockUsers = [{\n  id: 1,\n  email: 'admin@test.com',\n  name: 'Admin Test',\n  role: 'super_admin'\n}];\nexport const authAPI = {\n  async login(email, password) {\n    // Simulation d'une requête API\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const user = mockUsers.find(u => u.email === email);\n    if (user && password === 'password') {\n      return {\n        token: 'mock-jwt-token-' + Date.now(),\n        user: user\n      };\n    }\n    throw new Error('Email ou mot de passe incorrect');\n  },\n  async register(userData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const newUser = {\n      id: mockUsers.length + 1,\n      ...userData,\n      role: 'client'\n    };\n    return {\n      token: 'mock-jwt-token-' + Date.now(),\n      user: newUser\n    };\n  },\n  async getProfile() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token d\\'accès requis');\n    }\n\n    // Retourne un utilisateur mock pour le développement\n    return mockUsers[0];\n  }\n};\nexport const hotelAPI = {\n  async getHotels() {\n    // Implémentation mock\n    return [];\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","mockUsers","id","email","name","role","authAPI","login","password","Promise","resolve","setTimeout","user","find","u","token","Date","now","Error","register","userData","newUser","length","getProfile","localStorage","getItem","hotelAPI","getHotels"],"sources":["C:/Users/HOME/Videos/reservation-hotel/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js - VERSION MOCK TEMPORAIRE\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Données mock pour le développement\nconst mockUsers = [\n  {\n    id: 1,\n    email: 'admin@test.com',\n    name: 'Admin Test',\n    role: 'super_admin'\n  }\n];\n\nexport const authAPI = {\n  async login(email, password) {\n    // Simulation d'une requête API\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const user = mockUsers.find(u => u.email === email);\n    if (user && password === 'password') {\n      return {\n        token: 'mock-jwt-token-' + Date.now(),\n        user: user\n      };\n    }\n    throw new Error('Email ou mot de passe incorrect');\n  },\n\n  async register(userData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const newUser = {\n      id: mockUsers.length + 1,\n      ...userData,\n      role: 'client'\n    };\n    \n    return {\n      token: 'mock-jwt-token-' + Date.now(),\n      user: newUser\n    };\n  },\n\n  async getProfile() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token d\\'accès requis');\n    }\n\n    // Retourne un utilisateur mock pour le développement\n    return mockUsers[0];\n  }\n};\n\nexport const hotelAPI = {\n  async getHotels() {\n    // Implémentation mock\n    return [];\n  }\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,gBAAgB;EACvBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE;AACR,CAAC,CACF;AAED,OAAO,MAAMC,OAAO,GAAG;EACrB,MAAMC,KAAKA,CAACJ,KAAK,EAAEK,QAAQ,EAAE;IAC3B;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,MAAME,IAAI,GAAGX,SAAS,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,KAAK,KAAKA,KAAK,CAAC;IACnD,IAAIS,IAAI,IAAIJ,QAAQ,KAAK,UAAU,EAAE;MACnC,OAAO;QACLO,KAAK,EAAE,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;QACrCL,IAAI,EAAEA;MACR,CAAC;IACH;IACA,MAAM,IAAIM,KAAK,CAAC,iCAAiC,CAAC;EACpD,CAAC;EAED,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB,MAAM,IAAIX,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,MAAMW,OAAO,GAAG;MACdnB,EAAE,EAAED,SAAS,CAACqB,MAAM,GAAG,CAAC;MACxB,GAAGF,QAAQ;MACXf,IAAI,EAAE;IACR,CAAC;IAED,OAAO;MACLU,KAAK,EAAE,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrCL,IAAI,EAAES;IACR,CAAC;EACH,CAAC;EAED,MAAME,UAAUA,CAAA,EAAG;IACjB,MAAM,IAAId,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,MAAMK,KAAK,GAAGS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACV,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;IAC1C;;IAEA;IACA,OAAOjB,SAAS,CAAC,CAAC,CAAC;EACrB;AACF,CAAC;AAED,OAAO,MAAMyB,QAAQ,GAAG;EACtB,MAAMC,SAASA,CAAA,EAAG;IAChB;IACA,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}