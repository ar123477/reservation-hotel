{"ast":null,"code":"// src/services/api.js\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Headers communs\nconst getHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Gestion des réponses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      message: 'Erreur serveur'\n    }));\n    throw new Error(errorData.message || `Erreur ${response.status}: ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// API - AUTHENTIFICATION (adaptée à votre backend)\nexport const authAPI = {\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    return handleResponse(response);\n  },\n  register: async userData => {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(userData)\n    });\n    return handleResponse(response);\n  },\n  getProfile: async () => {\n    const response = await fetch(`${API_BASE_URL}/auth/me`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// API - HÔTELS (adaptée à votre structure)\nexport const hotelsAPI = {\n  getAll: async () => {\n    const response = await fetch(`${API_BASE_URL}/hotels`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  getById: async id => {\n    const response = await fetch(`${API_BASE_URL}/hotels/${id}`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  getByVille: async ville => {\n    const response = await fetch(`${API_BASE_URL}/hotels?ville=${ville}`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// API - CHAMBRES (adaptée à votre structure)\nexport const roomsAPI = {\n  getTypes: async () => {\n    const response = await fetch(`${API_BASE_URL}/chambres/types`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  getDisponibles: async (hotelId, dateDebut, dateFin) => {\n    const response = await fetch(`${API_BASE_URL}/chambres/disponibles?hotelId=${hotelId}&dateDebut=${dateDebut}&dateFin=${dateFin}`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  getByHotel: async hotelId => {\n    const response = await fetch(`${API_BASE_URL}/chambres/hotel/${hotelId}`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// API - RÉSERVATIONS (adaptée à votre structure)\nexport const reservationsAPI = {\n  create: async reservationData => {\n    const response = await fetch(`${API_BASE_URL}/reservations`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(reservationData)\n    });\n    return handleResponse(response);\n  },\n  getByUser: async () => {\n    const response = await fetch(`${API_BASE_URL}/reservations/mes-reservations`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  getById: async id => {\n    const response = await fetch(`${API_BASE_URL}/reservations/${id}`, {\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  },\n  annuler: async id => {\n    const response = await fetch(`${API_BASE_URL}/reservations/${id}/annuler`, {\n      method: 'PUT',\n      headers: getHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// API - PAIEMENTS\nexport const paymentsAPI = {\n  processPayment: async paymentData => {\n    const response = await fetch(`${API_BASE_URL}/paiements/process`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify(paymentData)\n    });\n    return handleResponse(response);\n  }\n};\nexport default {\n  auth: authAPI,\n  hotels: hotelsAPI,\n  rooms: roomsAPI,\n  reservations: reservationsAPI,\n  payments: paymentsAPI\n};","map":{"version":3,"names":["API_BASE_URL","getHeaders","token","localStorage","getItem","handleResponse","response","ok","errorData","json","catch","message","Error","status","statusText","authAPI","login","email","password","fetch","method","headers","body","JSON","stringify","register","userData","getProfile","hotelsAPI","getAll","getById","id","getByVille","ville","roomsAPI","getTypes","getDisponibles","hotelId","dateDebut","dateFin","getByHotel","reservationsAPI","create","reservationData","getByUser","annuler","paymentsAPI","processPayment","paymentData","auth","hotels","rooms","reservations","payments"],"sources":["C:/Users/HOME/Videos/reservation-hotel/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Headers communs\r\nconst getHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` })\r\n  };\r\n};\r\n\r\n// Gestion des réponses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({ message: 'Erreur serveur' }));\r\n    throw new Error(errorData.message || `Erreur ${response.status}: ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// API - AUTHENTIFICATION (adaptée à votre backend)\r\nexport const authAPI = {\r\n  login: async (email, password) => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: getHeaders(),\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  register: async (userData) => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: getHeaders(),\r\n      body: JSON.stringify(userData)\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getProfile: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// API - HÔTELS (adaptée à votre structure)\r\nexport const hotelsAPI = {\r\n  getAll: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/hotels`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getById: async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/hotels/${id}`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getByVille: async (ville) => {\r\n    const response = await fetch(`${API_BASE_URL}/hotels?ville=${ville}`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// API - CHAMBRES (adaptée à votre structure)\r\nexport const roomsAPI = {\r\n  getTypes: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/chambres/types`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getDisponibles: async (hotelId, dateDebut, dateFin) => {\r\n    const response = await fetch(\r\n      `${API_BASE_URL}/chambres/disponibles?hotelId=${hotelId}&dateDebut=${dateDebut}&dateFin=${dateFin}`,\r\n      { headers: getHeaders() }\r\n    );\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getByHotel: async (hotelId) => {\r\n    const response = await fetch(`${API_BASE_URL}/chambres/hotel/${hotelId}`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// API - RÉSERVATIONS (adaptée à votre structure)\r\nexport const reservationsAPI = {\r\n  create: async (reservationData) => {\r\n    const response = await fetch(`${API_BASE_URL}/reservations`, {\r\n      method: 'POST',\r\n      headers: getHeaders(),\r\n      body: JSON.stringify(reservationData)\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getByUser: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/reservations/mes-reservations`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getById: async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/reservations/${id}`, {\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  annuler: async (id) => {\r\n    const response = await fetch(`${API_BASE_URL}/reservations/${id}/annuler`, {\r\n      method: 'PUT',\r\n      headers: getHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// API - PAIEMENTS\r\nexport const paymentsAPI = {\r\n  processPayment: async (paymentData) => {\r\n    const response = await fetch(`${API_BASE_URL}/paiements/process`, {\r\n      method: 'POST',\r\n      headers: getHeaders(),\r\n      body: JSON.stringify(paymentData)\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\nexport default {\r\n  auth: authAPI,\r\n  hotels: hotelsAPI,\r\n  rooms: roomsAPI,\r\n  reservations: reservationsAPI,\r\n  payments: paymentsAPI\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}